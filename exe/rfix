#!/usr/bin/env ruby

class NullBundler
  def self.use_system_gems?
    false
  end

  def self.default_gemfile
    nil
  end
end

begin
  require "bundler"
  MaybeBundler = Bundler
rescue LoadError
  MaybeBundler = NullBundler
end

if (gemfile = MaybeBundler.default_gemfile) && MaybeBundler.use_system_gems?
  if gemfile.readlines.any? { |line| line.include?("rubocop") }
    ENV["BUNDLE_GEMFILE"] ||= gemfile.to_path
    unless ENV.key?("__RFIX_LOOP")
      ENV["__RFIX_LOOP"] ||= "1"
      bundler = Gem.bin_path("bundler", "bundle")
      exec bundler, "exec", __FILE__, *ARGV
    end
  end
end

require "cri"
require "rfix"
require "rfix/log"
require "rubocop"
require "rfix/extensions/string"
require "rfix/commands/extensions/options"
require "rfix/commands/helper/loader"
require "rfix/branch"

include Rfix::Loader
include Rfix::Log

root = Cri::Command.new

Dir.glob(File.join(__dir__, "../lib/rfix/commands/*.rb")).each do |command|
  root.add_command(Cri::Command.load_file(command, infer_name: true))
end

begin
  if root.run(ARGV, {}, hard_exit: false)
    exit 0
  else
    prt root.help
    exit 1
  end
rescue RuntimeError => e
  say_abort e.to_s
rescue Rfix::Error => e
  say_abort e.to_s
end
