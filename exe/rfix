#!/usr/bin/env ruby
# frozen_string_literal: true

require "rfix"
require "rubocop"
require "rfix/formatter"
require "cli/ui"

options = RuboCop::Options.new
config = RuboCop::ConfigStore.new
config.force_default_config!

extend Rfix::Log
CLI::UI::StdoutRouter.enable

say "Using version {{yellow:#{RuboCop::Version.version}}} of RuboCop"

base_config = {
  color: true,
  force_exclusion: true,
  auto_correct: true,
  formatters: ["Rfix::Formatter"]
}

case ARGV.shift
when "local"
  reference = Rfix.ref_since_push
when "origin"
  reference = Rfix.ref_since_origin
when "branch"
  abort_message = "No branch passed as second argument"
  unless reference = ARGV.shift
    say_abort abort_message
  end

  # Catches:
  # NOT OK: branch --help
  # OK branch master --help
  if reference.start_with?("--")
    say_abort abort_message
  end

  # Check if branch exists
  unless Rfix.has_branch?(reference)
    say_abort "Branch {{yellow:#{reference}}} does not exist"
  end

  say "Will compare against {{yellow:#{reference}}}"
else
  CLI::UI::Prompt.ask("What mode to run in?") do |handler|
    handler.option("local") { |_selection| reference = Rfix.ref_since_push }
    handler.option("origin") { |_selection| reference = Rfix.ref_since_origin }
    # handler.option('branch')   { |selection| reference = selection }
  end
end

# CLI::UI::Spinner.spin('Loading RuboCop {{@widget/status:1:2:3:4}}') do |spinner|
say "Run against {{yellow:#{reference}}} reference"
# spinner.update_title('Loading tracked files')
Rfix.load_tracked!(reference)

say "Current directory {{yellow:#{Dir.pwd}}}"
options.on("--untracked", "Include untracked files") do
  # spinner.update_title('Loading untracked files')
  Rfix.load_untracked!
end

should_list_files = false
options.on("--list-files", "List files found by git") do
  should_list_files = true
end

options.on("--dry", "No auto correct") do
  say "Only dry run"
  base_config.merge!({
                       auto_correct: false
                     })
end

limit_files = false
options.on("--limit-files NUM", Integer, "Limit number of files") do |limit|
  limit_files = limit
end

options.on("--config PATH", "A configuration file") do |path|
  say "Load config from {{yellow:#{path}}}"
  config.for(path)
end

options, paths = options.parse(ARGV)

paths = Rfix.paths if paths.empty?

if paths.empty?
  say "No files to run against"
  exit 0
end

if limit_files
  say "Limit number of files to {{yellow:#{limit_files}}}"
  paths = paths.take(limit_files)
end

if should_list_files
  say "Found {{yellow:#{paths.count}}} files"
  paths.each do |path|
    say "\t" + Rfix.to_relative(path: path)
  end
end

options = base_config.merge(options)
env = RuboCop::CLI::Environment.new(options, config, paths)

begin
  exit RuboCop::CLI::Command::ExecuteRunner.new(env).run
rescue RuboCop::Error => e
  say_abort e.message
end
