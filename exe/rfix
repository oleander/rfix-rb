# #!/usr/bin/env ruby

require "bundler"

require_relative "../lib/rfix/loader/spec.rb"
require_relative "../lib/rfix/loader/bundler.rb"
require_relative "../lib/rfix/loader/env.rb"

if spec = Bundler.find_locked("rubocop")
  Gem::Specification.deactivate(spec.name)
  unless spec.__materialize__&.activation
    abort "Could not load rubocop spec file"
  end
end

if spec = Gem.loaded_specs.fetch("rubocop")
  unless Env.requirement === spec.version
    abort "RuboCop version #{Env.pretty_req} required by rfix but #{spec.version} was found in Gemfile"
  end
end

require "cri"
require "rfix"
require "rfix/log"
require "rubocop"
require "rfix/extensions/string"
require "rfix/commands/extensions/options"
require "rfix/commands/helper/loader"
require "rfix/branch"

include Rfix::Loader
include Rfix::Log

root = Cri::Command.new

Dir.glob(File.join(__dir__, "../lib/rfix/commands/*.rb")).each do |command|
  root.add_command(Cri::Command.load_file(command, infer_name: true))
end

begin
  if root.run(ARGV, {}, hard_exit: false)
    exit 0
  else
    prt root.help
    exit 1
  end
rescue RuntimeError => e
  say_abort e.to_s
rescue Rfix::Error => e
  say_abort e.to_s
end
