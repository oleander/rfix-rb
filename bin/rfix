#!/usr/bin/env ruby -W0 --disable-all
# frozen_string_literal: true

require "bundler/inline"
require "rubygems"
require "pathname"
require "bundler"

module Path
  HOME = Pathname("~").expand_path
  DIR = Pathname(__dir__)
  LOCK = "Gemfile.lock"
  PWD = Pathname.getwd
  PROJECT = DIR.join("..").expand_path
end

def lock_path
  Path::PWD.ascend.find do |path|
    return if (path <=> Path::HOME) == -1

    path.join(Path::LOCK).file?
  end.join(Path::LOCK)
end

def find(name, env: Bundler.rubygems)
  env.loaded_specs(name) || env.find_name(name).max_by(&:version)
end

def deactivate(spec)
  Gem.loaded_specs.delete(spec.name)

  $LOAD_PATH.reject! do |path|
    spec.load_paths.include?(path)
  end
end

def specs
  return [] unless (path = lock_path)

  Bundler::LockfileParser.new(path.read).specs
end

def overlapping_specs
  specs.select do |spec|
    spec.name.start_with?("rubocop")
  end
end

def rfix
  find("rfix")
end

def dev?
  $PROGRAM_NAME.end_with?("bin/rfix")
end

def rfix_path
  Pathname(rfix.full_gem_path)
end

def commands
  rfix_path.glob("lib/rfix/commands/*.rb").map do |command|
    Cri::Command.load_file(command.to_path, infer_name: true)
  end
end

def deactivate_all!
  Gem.loaded_specs.each do |_name, spec|
    deactivate(spec)
  end
end

if overlapping_specs.any?
  deactivate_all!

  gemfile(false) do
    if dev?
      eval_gemfile Path::PROJECT.join("Gemfile")
    else
      overlapping_specs.each do |spec|
        gem spec.name, spec.version
      end
      gem "dry-cli", path: Path::PROJECT.join("vendor/dry-cli"), require: "dry/cli"
      gem "rfix", path: rfix_path, require: "rfix"
    end
  end
else
  require "rfix"
end

module Rfix
  Dry::CLI.new(CLI::Command).call
end
